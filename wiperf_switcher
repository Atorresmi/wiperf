#! /bin/bash
#
# wiperf_switcher       script to switch wiperf on/off
#
# Written by Nigel Bowden <wifinigel@gmail.com>.
#
# History:
#
# v0.01 - 8th Dec 2019 - Initial version
# v0.02 - 11th Dec 2019 - Fixed awk for multiple spaces, command ordrering, ufw rules 
# v0.03 - 14th Dec 2019 - Lots of updates for eth0 static routes, wlan0 check etc.
# v0.04 - 11th Jan 2020 - Fixed WLANPi name to WLAN Pi.
# v0.05 - 27th Feb 2020 - added tcp/80 to ufw rules
# v0.06 - 29th Mar 2020 - added support for ethernet tests & InfluxDB 
# v0.07 - 1st Apr 2020 - added 

set -e

NAME=wiperf_switcher
DESC="Script to switch wiperf on/off"
VERSION=0.07

HOME_DIR="/home/wlanpi"
USERNAME="wlanpi"

STATUS_FILE="${HOME_DIR}/wiperf/wiperf.on"
CFG_FILE="${HOME_DIR}/wiperf/config.ini"
LOG_FILE="${HOME_DIR}/wiperf/switcher.log"
ROUTE_FILE="/etc/network/if-up.d/route"

# Check we're root
if [[ $EUID -ne 0 ]]; then
   err_msg="This script must be run as root" 
   echo $err_msg | tee $LOG_FILE
   exit 1
fi

# Figure out platform type from config file - not really needed at present
echo "Checking platform type configured..." | tee $LOG_FILE
PLATFORM=`cat ${HOME_DIR}/wiperf/config.ini | grep platform\: | awk -F'[:][[:space:]]*' '{print $2}'` || true
if  [ -z "$PLATFORM" ]; then
  echo "No platform type found in config file" | tee -a $LOG_FILE 
  exit 0
else
  echo "Selected platform type in cfg file: $PLATFORM" | tee -a $LOG_FILE 
fi

###############################################################################
#
# Activate wiperf:
#
# 1.  Check that a mode is defined in config.ini
# 2.  Check interface wlan0 is available (wireless NIC plugged in)
#       a. wlan0 - wireless NIC available
#       b. eth0 - ethernet port available
# 3.  Read in test interval & offset from config file
# 4.  Check if our mgt interface is defined in config.ini
# 5.  Check a management server destination is set (IP for Splunk, URL for Influx)
# 5.  Check whether we use eth0 at mgt interface (static route req if we are)
# 6.  if we're using eth0 as mgt i/f:
#         a. Check eth0 is up
#         b. Figure out gateway used by eth0
#         c. Write route to /etc/network/interfaces 
# 7.  Add crontab entry to perform 5 min polling
# 8.  Add fw rules to harden eth0 & wlan0
# 9.  Backup various existing files to allow restoration when wiperf
#     deactivated
# 10.  Remove a number of existing files that need to be replaced
# 11. Create links from deleted file locations to wiperf config files
# 12. Create status file to indicate wiperf is active
# 13. Reboot the wlanpi to ensure clean activation
#
# Note: /etc/sysctl.conf included to ensure forwarding
#    cannot be accidentally be enabled in probe mode if
#    has been changed by some other process
#
###############################################################################
wiperf_on () {
  echo "Enabling wiperf..." | tee $LOG_FILE

  ############################################
  # 1. Get the probe mode (ethernet/wireless)
  ############################################
  MODE=`cat ${HOME_DIR}/wiperf/config.ini | grep probe_mode\: | awk -F'[:][[:space:]]*' '{print $2}'` || true
  if  [ -z "$MODE" ]; then
    echo "No mode found in config file" | tee -a $LOG_FILE 
    exit 0
  else
    echo "Selected mode in cfg file: ${MODE}" | tee -a $LOG_FILE 
  fi

  #######################################################################
  # 2. Check if wlan or eth interface is available (depending on config)
  #######################################################################
  if [ "$MODE" = "ethernet" ]; then
    # Check if eth0 available before we start changing things 
    TESTING_IF=`ip a | grep eth0` || true
    if  [ -z "$TESTING_IF" ]; then
      echo "No Eth Interface" | tee -a $LOG_FILE 
      exit 0
    fi
    echo "Ethernet details: ${TESTING_IF}" | tee -a $LOG_FILE
  else
    # Check if wlan0 available before we start changing things 
    TESTING_IF=`ip a | grep wlan0` || true
    if  [ -z "$TESTING_IF" ]; then
      echo "No WLAN Interface" | tee -a $LOG_FILE 
      exit 0
    fi
    echo "WLAN details ${TESTING_IF}" | tee -a $LOG_FILE
  fi

  #######################################
  # 3. Get test interval & offset value
  #######################################
  TEST_INTERVAL=`cat ${HOME_DIR}/wiperf/config.ini | grep test_interval | awk -F'[:][[:space:]]*' '{print $2}'` || true
  if  [ -z "TEST_INTERVAL" ]; then
    echo "No test interval in config" | tee -a $LOG_FILE 
    exit 0
  fi
  echo "Test interval from config file: ${TEST_INTERVAL}" | tee -a $LOG_FILE

  # Get test offset value
  TEST_OFFSET=`cat ${HOME_DIR}/wiperf/config.ini | grep test_offset | awk -F'[:][[:space:]]*' '{print $2}'` || true
  if  [ -z "TEST_OFFSET" ]; then
    echo "No test offset in config" | tee -a $LOG_FILE 
    exit 0
  fi
  echo "Test offset from config file: ${TEST_OFFSET}" | tee -a $LOG_FILE

  #######################################################
  # 4. Figure out the interface we send mgt traffic over
  #######################################################
  MGT_IF=`cat ${HOME_DIR}/wiperf/config.ini | grep mgt_if | awk -F'[:][[:space:]]*' '{print $2}'` || true
  # check if we have a mgt interface
  if [ -z "$MGT_IF" ]; then
    echo "No mgt interface config" | tee -a $LOG_FILE 
    exit 0
  fi
  echo "Mgt interface from config file: ${MGT_IF}" | tee -a $LOG_FILE

  ####################################################################
  # 5. Figure out the mgt destination (IP for Splunk, URL for Influx)
  ####################################################################
  EXPORTER_TYPE=`cat ${HOME_DIR}/wiperf/config.ini | grep exporter_type | awk -F'[:][[:space:]]*' '{print $2}'` || true
  # check if we have a exporter type
  if [ -z "$EXPORTER_TYPE" ]
  then
    echo "No exporter type detected" | tee -a $LOG_FILE 
    exit 0
  fi
  echo "Exporter type: ${EXPORTER_TYPE}" | tee -a $LOG_FILE

  if [ "$EXPORTER_TYPE" == "splunk" ]
  then
    MGT_IP=`cat ${HOME_DIR}/wiperf/config.ini | grep splunk_host | awk -F'[:][[:space:]]*' '{print $2}'` || true
    MGT_PORT=`cat ${HOME_DIR}/wiperf/config.ini | grep splunk_port | awk -F'[:][[:space:]]*' '{print $2}'` || true
  elif [ "$EXPORTER_TYPE" == "influxdb" ]
  then
    MGT_IP=`cat ${HOME_DIR}/wiperf/config.ini | grep influx_host | awk -F'[:][[:space:]]*' '{print $2}'` || true
    MGT_PORT=`cat ${HOME_DIR}/wiperf/config.ini | grep influx_port | awk -F'[:][[:space:]]*' '{print $2}'` || true
  elif [ "$EXPORTER_TYPE" == "influxdb2" ]
  then
    MGT_IP=`cat ${HOME_DIR}/wiperf/config.ini | grep influx2_host | awk -F'[:][[:space:]]*' '{print $2}'` || true
    MGT_PORT=`cat ${HOME_DIR}/wiperf/config.ini | grep influx2_port | awk -F'[:][[:space:]]*' '{print $2}'` || true
  else
    echo "Unknown exporter type detected" | tee -a $LOG_FILE 
    exit 0
  fi

  # check if we have a mgt IP
  if [ -z "$MGT_IP" ]; then
    echo "No mgt destination address defined....exiting" | tee -a $LOG_FILE
    exit 0 
  fi
  echo "Mgt server IP from config file: ${MGT_IP}" | tee -a $LOG_FILE

  # check if we have a mgt port
  if [ -z "$MGT_PORT" ]; then
    echo "No mgt port defined....exiting" | tee -a $LOG_FILE
    exit 0
  fi
  echo "Mgt port from config file: ${MGT_PORT}" | tee -a $LOG_FILE

  #########################################################
  # 6. If we're sending mgt traffic via eth0 and tests are 
  #    run over wlan0, set up static route. If using
  #    ethernet, assume WLAN down, so no routing issue.
  #########################################################
  if [ "$MGT_IF" == "eth0" ] && [ "$MODE" == "wireless" ]; then
    # Using eth0 - need to set static route back to Splunk if eth0 up

    # is eth0 up...fail if not
    ETH_STATUS=`ip a | grep eth0 | grep 'state UP'` || true
    if  [ -z "$ETH_STATUS" ]; then
      echo "eth0 is down..." | tee -a $LOG_FILE 
      exit 0
    fi
    echo "Ethernet status: ${ETH_STATUS}" | tee -a $LOG_FILE

    # get def gw of eth0
    ETH_DEF_ROUTE=`cat /var/lib/dhcp/dhclient.eth0.leases | grep 'option routers' | head -n1 | awk  '{print $3}' | sed 's/.$//'` || true
    # check if we got gateway OK
    if [ -z "$ETH_DEF_ROUTE" ]; then
      echo "Eth0 cannot get def gw" | tee -a $LOG_FILE 
      exit 0
    fi
    echo "Ethernet default route: ${ETH_DEF_ROUTE}" | tee -a $LOG_FILE

    # add static route to route file in /etc/network/if-up.d

    # if MGT_IP is a name rather than IP, then lookup IP
    if [[ ! "$MGT_IP" =~  [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ]]
    then
      echo "Mgt destination appears to be a name rather than IP address: ${MGT_IP}" | tee -a $LOG_FILE
      MGT_NAME=$MGT_IP
      echo "Looking up mgt platform IP address..." | tee -a $LOG_FILE
      MGT_IP=`dig +short ${MGT_IP}`
      echo "MGT_IP was ${MGT_NAME}, is now: ${MGT_IP}"
    fi

    # if route file exists, back it up
    if [ -e "$ROUTE_FILE" ]; then
      cp $ROUTE_FILE ${ROUTE_FILE}.orig
    fi

    # create /etc/network/if-up.d/route & chmod 755
    echo "#!/bin/sh" > $ROUTE_FILE
    STATIC_CMD="/bin/ip route add $MGT_IP via $ETH_DEF_ROUTE dev eth0"
    echo "Static route command: ${STATIC_CMD}" | tee -a $LOG_FILE
    echo $STATIC_CMD >> $ROUTE_FILE
    chmod 755 $ROUTE_FILE
  fi

  ########################
  # 7. Add crontab entry
  ########################
  line="${TEST_OFFSET}-59/${TEST_INTERVAL} * * * * /usr/bin/env python3 ${HOME_DIR}/wiperf/wi-perf.py > ${HOME_DIR}/wiperf/wiperf.log 2>&1"
  (crontab -u $USERNAME -l; echo "$line" ) | crontab -u $USERNAME -
  LAST_RESULT=$?
  if [ $LAST_RESULT -ne 0 ]; then
    echo "Cron add failed" | tee -a $LOG_FILE 
    exit 0
  fi
  echo "Cron command added: ${line}" | tee -a $LOG_FILE

  #################################################################################
  # 8. Harden eth0 & wlan0 by adding fw rules - allow only ssh in on eth0 & wlan0
  #################################################################################
  ufw insert 1 allow in on eth0 to any port ssh
  ufw insert 2 allow in on eth0 to any port http
  ufw insert 3 deny in on eth0
  ufw insert 4 allow in on wlan0 to any port ssh
  ufw insert 5 allow in on wlan0 to any port http
  ufw insert 6 deny in on wlan0

  ##################################
  # 9. Backup existing config files
  ##################################
  echo "Backing up config files..." | tee -a $LOG_FILE
  cp /etc/network/interfaces /etc/network/interfaces.probe
  cp /etc/sysctl.conf /etc/sysctl.conf.probe
  cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf.probe

  ###################################
  # 10. Remove existing config files
  ###################################
  echo "Removing existing config files..." | tee -a $LOG_FILE
  rm /etc/network/interfaces
  rm /etc/sysctl.conf
  rm /etc/wpa_supplicant/wpa_supplicant.conf

  ##################################
  # 11. Link to wiperf config files
  ##################################
  echo "Linking temp config files..." | tee -a $LOG_FILE
  if [ "$MODE" == "wireless" ]; then
    ln -s ${HOME_DIR}/wiperf/conf/etc/network/interfaces.wlan /etc/network/interfaces  
  else
    ln -s ${HOME_DIR}/wiperf/conf/etc/network/interfaces.eth /etc/network/interfaces
  fi

  ln -s ${HOME_DIR}/wiperf/conf/etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
  ln -s ${HOME_DIR}/wiperf/conf/etc/sysctl.conf /etc/sysctl.conf

  ############################################################
  # 12. Create status file to display status messages on FPMS
  ############################################################
  echo "Creating status file." | tee -a $LOG_FILE
  touch $STATUS_FILE

  #############
  # 13. Reboot 
  #############
  echo "WLAN Pi will now reboot" | tee -a $LOG_FILE
  sleep 1
  reboot
}

###############################################################################
#
# Deactivate wiperf:
#
# 1. Get the probe mode
# 2. Remove crontab entry to stop polling
# 3. Remove eth0 static route (if needed)
# 4. Remove fw rules added during mode switch
# 5. Remove links created during activation
# 6. Restore config files backed up during activation
# 7. Remove status file to indicate wiperf no longer active
# 8. Reboot wlanpi to provide clean restoration of services
#
###############################################################################
wiperf_off () {
  #echo "Disabling wiperf..."

  ############################################
  # 1. Get the probe mode (ethernet/wireless)
  ############################################
  MODE=`cat ${HOME_DIR}/wiperf/config.ini | grep probe_mode\: | awk -F'[:][[:space:]]*' '{print $2}'` || true
  if  [ -z "$MODE" ]; then
    echo "No mode found in config file" | tee -a $LOG_FILE 
    exit 0
  fi

  echo "Selected mode in cfg file: ${MODE}" | tee -a $LOG_FILE
  
  ###########################################
  # 2. Remove crontab entry to stop polling
  ###########################################
  echo "Removing cront job." | tee -a $LOG_FILE
  crontab -u $USERNAME -l | grep -v 'wi-perf.py'  | crontab -u $USERNAME -
  LAST_RESULT=$?
  if [ $LAST_RESULT -ne 0 ]; then
    echo "Cron remove failed" | tee $LOG_FILE 
    exit 0
  fi
  
  echo "Cron entry removed" | tee $LOG_FILE
  
  ##########################################################
  # 3. Figure out the interface we send mgt traffic over 
  #    and remove static route if eth0 and mode is wireless
  ##########################################################
  MGT_IF=`cat ${HOME_DIR}/wiperf/config.ini | grep mgt_if | awk -F'[:][[:space:]]*' '{print $2}'` || true
  # check if we have a mgt interface
  if [ -z "$MGT_IF" ]; then
    echo "No mgt interface in config file" | tee $LOG_FILE 
    exit 0
  fi
  
  echo "Mgt interface from config file: ${MGT_IF}" | tee $LOG_FILE

  if [ "$MGT_IF" == "eth0" ] && [ "$MODE" == "wireless" ]; then
    # Using eth0 - need to remove static route back to mgt platform

    # if route file backup exists restore it, otherwise, remove route file
    if [ -e "${ROUTE_FILE}.orig" ]
    then
      echo "Removing static route" | tee $LOG_FILE
      cp "${ROUTE_FILE}.orig" $ROUTE_FILE
      rm "${ROUTE_FILE}.orig"
    else
      echo "Removing static route" | tee $LOG_FILE
      rm $ROUTE_FILE
    fi

  fi
  
  ##################################
  # 4. Remove eth0 & wlan0 fw rules
  ##################################
  ufw delete allow in on eth0 to any port ssh
  ufw delete allow in on eth0 to any port http
  ufw delete deny in on eth0
  ufw delete allow in on wlan0 to any port ssh
  ufw delete allow in on wlan0 to any port http
  ufw delete deny in on wlan0

  ##################################
  # 5. Remove links to config files
  ##################################
  echo "Removing links to temp config files" | tee $LOG_FILE
  unlink /etc/network/interfaces
  unlink /etc/sysctl.conf
  unlink /etc/wpa_supplicant/wpa_supplicant.conf
 
  ###################################
  # 6. Restore original config files
  ###################################
  echo "Restoring original config files" | tee $LOG_FILE
  cp /etc/network/interfaces.probe /etc/network/interfaces 
  cp /etc/sysctl.conf.probe /etc/sysctl.conf
  cp /etc/wpa_supplicant/wpa_supplicant.conf.probe /etc/wpa_supplicant/wpa_supplicant.conf


  ###################################
  # 7. Remove FPMS status file
  ###################################
  echo "WLAN Pi will now reboot"
  if [ -e "$STATUS_FILE" ]; then
    echo "Removing status file" | tee $LOG_FILE
    rm $STATUS_FILE
  fi

  ###################################
  # 8. Reboot
  ###################################
  echo "Rebooting" | tee $LOG_FILE
  sleep 1
  reboot
}

status () {
  if [ -e "$STATUS_FILE" ]; then
    echo "wiperf is currently enabled"
    exit 0
  else
    echo "wiperf is currently disabled"
    exit 0
  fi

}

version () {
    N=/etc/wlanpiwiperf/$NAME
        echo "Version: $N $VERSION" >&2
        exit 1

}

case "$1" in
  on)
        wiperf_on
        ;;
  off)
        wiperf_off
        ;;
  status)
        status
        ;;
  version)
        version;;
  *)
        N=/etc/wlanpiwiperf/$NAME
        echo "Usage: $N {on|off|status|version}" >&2
        exit 1
        ;;
esac

exit 0
